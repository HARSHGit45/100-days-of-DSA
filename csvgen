import xml.etree.ElementTree as ET
import csv

# Input JaCoCo XML and output CSV
xml_file = "jacoco.xml"
csv_file = "package_report.csv"

# Define status & priority thresholds
def get_status(avg_coverage):
    if avg_coverage < 20:
        return "Critical", "Immediate"
    elif 20 <= avg_coverage <= 59:
        return "Poor", "High"
    elif 60 <= avg_coverage <= 79:
        return "Fair", "High"
    elif 80 <= avg_coverage <= 89:
        return "Good", "Low"
    else:  # >=90
        return "Excellent", "Low"

# Parse XML
tree = ET.parse(xml_file)
root = tree.getroot()

with open(csv_file, mode="w", newline="") as f:
    writer = csv.writer(f)
    # CSV Header
    writer.writerow([
        "Package",
        "Total Classes",
        "Total Methods",
        "Total Lines",
        "Instruction Coverage (%)",
        "Branch Coverage (%)",
        "Average Coverage (%)",
        "Status",
        "Priority"
    ])

    for package in root.findall("package"):
        pkg_name = package.get("name")

        # Aggregate counters
        instr_cov = branch_cov = line_cov = 0
        instr_total = branch_total = line_total = 0
        method_count = 0
        class_count = len(package.findall("class"))

        # Sum counters from classes and methods
        for cls in package.findall("class"):
            # Class counters
            for counter in cls.findall("counter"):
                ctype = counter.get("type")
                covered = int(counter.get("covered"))
                missed = int(counter.get("missed"))
                total = covered + missed
                if ctype == "INSTRUCTION":
                    instr_cov += covered
                    instr_total += total
                elif ctype == "BRANCH":
                    branch_cov += covered
                    branch_total += total
                elif ctype == "LINE":
                    line_cov += covered
                    line_total += total
            # Count methods
            method_count += len(cls.findall("method"))

        # Calculate percentages
        instr_pct = round((instr_cov / instr_total) * 100, 2) if instr_total else 0
        branch_pct = round((branch_cov / branch_total) * 100, 2) if branch_total else 0
        avg_pct = round((instr_pct + branch_pct)/2, 2)

        # Status & priority
        status, priority = get_status(avg_pct)

        # Write CSV row
        writer.writerow([
            pkg_name,
            class_count,
            method_count,
            line_total,
            instr_pct,
            branch_pct,
            avg_pct,
            status,
            priority
        ])

print(f"âœ… Package-level coverage report generated: {csv_file}")
