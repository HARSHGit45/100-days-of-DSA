import xml.etree.ElementTree as ET
import csv

# Input JaCoCo XML and output CSV
xml_file = "jacoco.xml"
csv_file = "package_report.csv"

# Status & priority mapping
def get_status(avg_coverage):
    if avg_coverage < 20:
        return "Critical", "Immediate"
    elif 20 <= avg_coverage <= 59:
        return "Poor", "High"
    elif 60 <= avg_coverage <= 79:
        return "Fair", "High"
    elif 80 <= avg_coverage <= 89:
        return "Good", "Low"
    else:  # >=90
        return "Excellent", "Low"

# Normalize package name
# Keep com/imobile/pos + next 2 parts only
def normalize_package(pkg_name):
    parts = pkg_name.split("/")
    if len(parts) > 5:  # com, imobile, pos + 2 more
        return "/".join(parts[:5])
    return "/".join(parts)

# Parse JaCoCo XML
tree = ET.parse(xml_file)
root = tree.getroot()

with open(csv_file, mode="w", newline="") as f:
    writer = csv.writer(f)
    writer.writerow([
        "Package",
        "Total Classes",
        "Total Methods",
        "Total Lines",
        "Instruction Coverage (%)",
        "Branch Coverage (%)",
        "Average Coverage (%)",
        "Status",
        "Priority"
    ])

    # Each <package> already has aggregated counters
    for pkg in root.findall("package"):
        pkg_name = normalize_package(pkg.get("name"))

        instr_cov = instr_total = branch_cov = branch_total = 0
        lines = methods = classes = 0

        for counter in pkg.findall("counter"):
            ctype = counter.get("type")
            missed = int(counter.get("missed"))
            covered = int(counter.get("covered"))
            total = missed + covered

            if ctype == "INSTRUCTION":
                instr_cov, instr_total = covered, total
            elif ctype == "BRANCH":
                branch_cov, branch_total = covered, total
            elif ctype == "LINE":
                lines = total
            elif ctype == "METHOD":
                methods = total
            elif ctype == "CLASS":
                classes = total

        # Calculate percentages
        instr_pct = round((instr_cov / instr_total) * 100, 2) if instr_total else 0
        branch_pct = round((branch_cov / branch_total) * 100, 2) if branch_total else 0
        avg_pct = round((instr_pct + branch_pct) / 2, 2)
        status, priority = get_status(avg_pct)

        writer.writerow([
            pkg_name,
            classes,
            methods,
            lines,
            instr_pct,
            branch_pct,
            avg_pct,
            status,
            priority
        ])

print(f"âœ… Package-level coverage CSV generated: {csv_file}")
