import xml.etree.ElementTree as ET
import csv

xml_file = "jacoco.xml"

# ===================== Helpers =====================

def get_status(avg_coverage):
    if avg_coverage < 20:
        return "Critical", "Immediate"
    elif 20 <= avg_coverage <= 59:
        return "Poor", "High"
    elif 60 <= avg_coverage <= 79:
        return "Fair", "High"
    elif 80 <= avg_coverage <= 89:
        return "Good", "Low"
    else:
        return "Excellent", "Low"

def safe_pct(covered, missed):
    total = covered + missed
    return round((covered / total) * 100, 2) if total else 0, total

# ===================== PACKAGE LEVEL =====================

def package_report(root, out_file="package_report.csv"):
    with open(out_file, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([
            "Package", "Total Classes", "Total Methods", "Total Lines",
            "Instruction Coverage (%)", "Branch Coverage (%)",
            "Average Coverage (%)", "Status", "Priority"
        ])

        for package in root.findall("package"):
            pkg_name = package.get("name")
            class_count = len(package.findall("class"))
            method_count = 0
            instr_cov = instr_total = branch_cov = branch_total = line_total = 0

            for cls in package.findall("class"):
                method_count += len(cls.findall("method"))
                for counter in cls.findall("counter"):
                    ctype, covered, missed = counter.get("type"), int(counter.get("covered")), int(counter.get("missed"))
                    if ctype == "INSTRUCTION":
                        instr_cov += covered; instr_total += covered + missed
                    elif ctype == "BRANCH":
                        branch_cov += covered; branch_total += covered + missed
                    elif ctype == "LINE":
                        line_total += covered + missed

            instr_pct, _ = safe_pct(instr_cov, instr_total - instr_cov)
            branch_pct, _ = safe_pct(branch_cov, branch_total - branch_cov)
            avg_pct = round((instr_pct + branch_pct) / 2, 2)
            status, priority = get_status(avg_pct)

            writer.writerow([
                pkg_name, class_count, method_count, line_total,
                instr_pct, branch_pct, avg_pct, status, priority
            ])

    print(f"âœ… Package-level report written to {out_file}")

# ===================== CLASS LEVEL =====================

def class_report(root, out_file="class_report.csv"):
    with open(out_file, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([
            "Package", "Class", "Total Methods", "Total Lines",
            "Instruction Coverage (%)", "Branch Coverage (%)",
            "Average Coverage (%)", "Status", "Priority"
        ])

        for package in root.findall("package"):
            pkg_name = package.get("name")

            for cls in package.findall("class"):
                class_name = cls.get("name").split("/")[-1]
                method_count = len(cls.findall("method"))
                instr_cov = instr_total = branch_cov = branch_total = line_total = 0

                for counter in cls.findall("counter"):
                    ctype, covered, missed = counter.get("type"), int(counter.get("covered")), int(counter.get("missed"))
                    if ctype == "INSTRUCTION":
                        instr_cov += covered; instr_total += covered + missed
                    elif ctype == "BRANCH":
                        branch_cov += covered; branch_total += covered + missed
                    elif ctype == "LINE":
                        line_total += covered + missed

                instr_pct, _ = safe_pct(instr_cov, instr_total - instr_cov)
                branch_pct, _ = safe_pct(branch_cov, branch_total - branch_cov)
                avg_pct = round((instr_pct + branch_pct) / 2, 2)
                status, priority = get_status(avg_pct)

                writer.writerow([
                    pkg_name, class_name, method_count, line_total,
                    instr_pct, branch_pct, avg_pct, status, priority
                ])

    print(f"âœ… Class-level report written to {out_file}")

# ===================== METHOD LEVEL =====================

def method_report(root, out_file="method_report.csv"):
    with open(out_file, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([
            "Package", "Class", "Method", "Line Number",
            "Instruction Coverage (%)", "Branch Coverage (%)",
            "Average Coverage (%)", "Status", "Priority"
        ])

        for package in root.findall("package"):
            pkg_name = package.get("name")

            for cls in package.findall("class"):
                class_name = cls.get("name").split("/")[-1]

                for method in cls.findall("method"):
                    method_name = method.get("name")
                    line_number = method.get("line")

                    instr_cov = instr_total = branch_cov = branch_total = 0
                    for counter in method.findall("counter"):
                        ctype, covered, missed = counter.get("type"), int(counter.get("covered")), int(counter.get("missed"))
                        if ctype == "INSTRUCTION":
                            instr_cov += covered; instr_total += covered + missed
                        elif ctype == "BRANCH":
                            branch_cov += covered; branch_total += covered + missed

                    instr_pct, _ = safe_pct(instr_cov, instr_total - instr_cov)
                    branch_pct, _ = safe_pct(branch_cov, branch_total - branch_cov)
                    avg_pct = round((instr_pct + branch_pct) / 2, 2)
                    status, priority = get_status(avg_pct)

                    writer.writerow([
                        pkg_name, class_name, method_name, line_number,
                        instr_pct, branch_pct, avg_pct, status, priority
                    ])

    print(f"âœ… Method-level report written to {out_file}")

# ===================== SUMMARY (TOTAL COVERAGE) =====================

def summary_report(root, out_file="summary.csv"):
    total_line_cov = total_line_missed = 0
    total_branch_cov = total_branch_missed = 0

    # Aggregate global totals from <counter> tags
    for counter in root.findall("counter"):
        ctype, covered, missed = counter.get("type"), int(counter.get("covered")), int(counter.get("missed"))
        if ctype == "LINE":
            total_line_cov += covered
            total_line_missed += missed
        elif ctype == "BRANCH":
            total_branch_cov += covered
            total_branch_missed += missed

    # Use SonarQube formula
    total_cov = total_line_cov + total_branch_cov
    total_missed = total_line_missed + total_branch_missed
    total_elements = total_cov + total_missed

    # Handle case where BRANCH data doesn't exist
    if total_branch_cov + total_branch_missed == 0:
        coverage_pct = round((total_line_cov / (total_line_cov + total_line_missed)) * 100, 2) if total_line_cov + total_line_missed else 0
    else:
        coverage_pct = round((total_cov / total_elements) * 100, 2) if total_elements else 0

    status, priority = get_status(coverage_pct)

    with open(out_file, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([
            "Metric", "Covered Lines", "Missed Lines",
            "Covered Branches", "Missed Branches",
            "Total Coverage (%)", "Status", "Priority"
        ])
        writer.writerow([
            "Overall", total_line_cov, total_line_missed,
            total_branch_cov, total_branch_missed,
            coverage_pct, status, priority
        ])

    print(f"âœ… Summary report written to {out_file}")
    print(f"ðŸ“Š Total Project Coverage: {coverage_pct}%")

# ===================== Run all =====================

if __name__ == "__main__":
    tree = ET.parse(xml_file)
    root = tree.getroot()

    package_report(root)
    class_report(root)
    method_report(root)
    summary_report(root)
