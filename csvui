<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Modern JaCoCo Dashboard</title>
<style>
    /* Reset & fonts */
    body { font-family: 'Inter', sans-serif; background: #f4f6f9; margin: 0; padding: 0; }
    header { background: #1976d2; color: white; text-align: center; padding: 1rem; box-shadow: 0 2px 4px rgba(0,0,0,0.2); }
    h1 { margin: 0; font-weight: 500; }

    .breadcrumb { padding: 0.75rem 1rem; color: #555; font-size: 0.9rem; }
    .breadcrumb span { cursor: pointer; color: #1976d2; margin-right: 5px; }
    .breadcrumb span:hover { text-decoration: underline; }

    #summary { display: flex; flex-wrap: wrap; gap: 1rem; justify-content: center; margin: 1rem; }
    .card {
        background: white; padding: 1rem 1.5rem; border-radius: 12px; flex: 1 1 200px; min-width: 200px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1); text-align: center; transition: transform 0.2s;
    }
    .card:hover { transform: translateY(-3px); }
    .card h2 { margin: 0.25rem 0; font-size: 2rem; }
    .card p { margin: 0; font-size: 0.9rem; color: #666; }

    table { width: 95%; margin: 1rem auto; border-collapse: collapse; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.05); }
    th, td { padding: 0.75rem 1rem; text-align: left; }
    th { background: #1976d2; color: white; position: sticky; top: 0; }
    tr:hover { background: #e3f2fd; cursor: pointer; transition: background 0.2s; }

    .progress-container { background: #eee; border-radius: 10px; height: 12px; overflow: hidden; }
    .progress-bar {
        height: 100%; border-radius: 10px; transition: width 0.5s ease;
        text-align: right; padding-right: 5px; color: white; font-size: 0.75rem; line-height: 12px;
    }

    .critical { background: #d32f2f; }
    .poor { background: #f57c00; }
    .fair { background: #fbc02d; }
    .good { background: #388e3c; }
    .excellent { background: #00796b; }

    .alert {
        width: 95%; margin: 1rem auto; padding: 1rem; border-radius: 10px; color: white; font-weight: bold;
        text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .alert-critical { background: #d32f2f; }
    .alert-poor { background: #f57c00; }

    @media(max-width: 768px) {
        th, td { padding: 0.5rem; font-size: 0.85rem; }
    }
</style>
</head>
<body>

<header>
    <h1>Modern JaCoCo Coverage Dashboard</h1>
</header>

<div class="breadcrumb" id="breadcrumb">Home</div>

<div id="summary"></div>
<div id="alert"></div>
<div id="table-container"></div>

<script>
let packageData = [], classData = [], methodData = [];
let currentPackage = null, currentClass = null;

// ================= CSV Loader =================
async function loadCSV(file) {
    const res = await fetch(file);
    const text = await res.text();
    const rows = text.split('\n').filter(r => r.trim() !== '');
    const headers = rows[0].split(',');
    return rows.slice(1).map(row => {
        const cols = row.split(',');
        let obj = {};
        headers.forEach((h,i) => obj[h.trim()] = cols[i]?.trim());
        return obj;
    });
}

// ================= Helper Functions =================
function getCoverageClass(status) {
    switch(status.toLowerCase()) {
        case 'critical': return 'critical';
        case 'poor': return 'poor';
        case 'fair': return 'fair';
        case 'good': return 'good';
        case 'excellent': return 'excellent';
        default: return '';
    }
}

function showAlert(status) {
    const alertDiv = document.getElementById('alert');
    if(status.toLowerCase() === 'critical') {
        alertDiv.innerHTML = `<div class="alert alert-critical">⚠ Critical coverage! Add unit tests immediately.</div>`;
    } else if(status.toLowerCase() === 'poor') {
        alertDiv.innerHTML = `<div class="alert alert-poor">⚠ Poor coverage! Consider adding more tests.</div>`;
    } else {
        alertDiv.innerHTML = '';
    }
}

function updateBreadcrumb() {
    const bc = document.getElementById('breadcrumb');
    let html = `<span onclick="goHome()">Home</span>`;
    if(currentPackage) html += ` > <span onclick="showPackage()">${currentPackage}</span>`;
    if(currentClass) html += ` > <span onclick="showClass()">${currentClass}</span>`;
    bc.innerHTML = html;
}

// ================= Render Summary Cards =================
function renderSummary() {
    const summary = document.getElementById('summary');
    summary.innerHTML = '';

    const totalPackages = packageData.length;
    const totalClasses = classData.length;
    const criticalPackages = packageData.filter(p => p['Status'].toLowerCase() === 'critical').length;
    const avgCoverage = Math.round(packageData.reduce((acc, p) => acc + parseFloat(p['Instruction Coverage (%)']), 0) / totalPackages);

    const cards = [
        {title: 'Total Packages', value: totalPackages},
        {title: 'Total Classes', value: totalClasses},
        {title: 'Critical Packages', value: criticalPackages},
        {title: 'Average Instruction Coverage', value: avgCoverage + '%'}
    ];

    cards.forEach(c => {
        const div = document.createElement('div');
        div.className = 'card';
        div.innerHTML = `<p>${c.title}</p><h2>${c.value}</h2>`;
        summary.appendChild(div);
    });
}

// ================= Render Table =================
function renderTable(data, level) {
    const container = document.getElementById('table-container');
    container.innerHTML = '';

    if(data.length === 0){
        container.innerHTML = '<p style="text-align:center;">No data to display</p>';
        return;
    }

    const table = document.createElement('table');
    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    Object.keys(data[0]).forEach(h => {
        const th = document.createElement('th');
        th.innerText = h;
        headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);

    const tbody = document.createElement('tbody');

    data.forEach(row => {
        const tr = document.createElement('tr');

        Object.keys(row).forEach(key => {
            const td = document.createElement('td');
            let val = row[key];

            if(key.toLowerCase().includes('coverage')) {
                // add progress bar
                td.innerHTML = `<div class="progress-container">
                    <div class="progress-bar ${getCoverageClass(row['Status'])}" style="width:${val}%">${val}%</div>
                </div>`;
            } else td.innerText = val;

            tr.appendChild(td);
        });

        if(level === 'package') {
            tr.addEventListener('click', () => {
                currentPackage = row['Package'];
                currentClass = null;
                const filtered = classData.filter(c => c['Package'] === currentPackage);
                showAlert(filtered.reduce((acc,c)=>Math.min(acc, parseFloat(c['Instruction Coverage (%)'])),100)<20?'critical':'');
                renderTable(filtered,'class');
                updateBreadcrumb();
            });
        } else if(level==='class') {
            tr.addEventListener('click', () => {
                currentClass = row['Class (with extension)'];
                const filtered = methodData.filter(m => m['Package']===currentPackage && m['Class (with extension)']===currentClass);
                showAlert(filtered.reduce((acc,m)=>Math.min(acc, parseFloat(m['Instruction Coverage (%)'])),100)<20?'critical':'');
                renderTable(filtered,'method');
                updateBreadcrumb();
            });
        }

        tbody.appendChild(tr);
    });

    table.appendChild(tbody);
    container.appendChild(table);
}

// ================= Navigation =================
function goHome(){
    currentPackage = null; currentClass = null;
    showAlert('');
    renderTable(packageData,'package');
    updateBreadcrumb();
}

function showPackage(){
    if(!currentPackage) return;
    currentClass = null;
    const filtered = classData.filter(c=>c['Package']===currentPackage);
    renderTable(filtered,'class');
    showAlert(filtered.reduce((acc,c)=>Math.min(acc, parseFloat(c['Instruction Coverage (%)'])),100)<20?'critical':'');
    updateBreadcrumb();
}

function showClass(){
    if(!currentPackage || !currentClass) return;
    const filtered = methodData.filter(m=>m['Package']===currentPackage && m['Class (with extension)']===currentClass);
    renderTable(filtered,'method');
    showAlert(filtered.reduce((acc,m)=>Math.min(acc, parseFloat(m['Instruction Coverage (%)'])),100)<20?'critical':'');
    updateBreadcrumb();
}

// ================= Init =================
async function init(){
    packageData = await loadCSV('package_report.csv');
    classData = await loadCSV('class_report.csv');
    methodData = await loadCSV('method_report.csv');

    renderSummary();
    renderTable(packageData,'package');
}

init();
</script>

</body>
</html>
