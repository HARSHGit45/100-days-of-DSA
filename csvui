<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JaCoCo Coverage Dashboard</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background: #f5f5f5;
        }
        header {
            background: #1e88e5;
            color: white;
            padding: 1rem;
            text-align: center;
        }
        table {
            width: 95%;
            margin: 1rem auto;
            border-collapse: collapse;
            background: white;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        th, td {
            padding: 0.75rem 1rem;
            text-align: left;
        }
        th {
            background: #1976d2;
            color: white;
            position: sticky;
            top: 0;
        }
        tr:nth-child(even) { background: #f2f2f2; }
        tr:hover { background: #e3f2fd; cursor: pointer; }

        .critical { background: #ff8a80 !important; }
        .poor { background: #ffcc80 !important; }
        .fair { background: #fff176 !important; }
        .good { background: #81c784 !important; }
        .excellent { background: #4db6ac !important; }

        .alert {
            text-align: center;
            margin: 1rem auto;
            padding: 1rem;
            width: 95%;
            border-radius: 5px;
            font-weight: bold;
            color: white;
        }
        .alert-critical { background: #d32f2f; }
        .alert-poor { background: #f57c00; }

        .breadcrumb {
            width: 95%;
            margin: 0 auto 1rem;
            font-size: 0.9rem;
            color: #555;
        }
        .breadcrumb span {
            cursor: pointer;
            color: #1e88e5;
        }
        .breadcrumb span:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>

<header>
    <h1>JaCoCo Coverage Dashboard</h1>
</header>

<div class="breadcrumb" id="breadcrumb">Home</div>

<div id="alert"></div>
<div id="table-container"></div>

<script>
    let packageData = [];
    let classData = [];
    let methodData = [];

    let currentPackage = null;
    let currentClass = null;

    async function loadCSV(file) {
        const res = await fetch(file);
        const text = await res.text();
        const rows = text.split('\n').filter(r => r.trim() !== '');
        const headers = rows[0].split(',');
        return rows.slice(1).map(row => {
            const cols = row.split(',');
            let obj = {};
            headers.forEach((h, i) => obj[h.trim()] = cols[i]?.trim());
            return obj;
        });
    }

    function getCoverageClass(status) {
        switch(status.toLowerCase()) {
            case 'critical': return 'critical';
            case 'poor': return 'poor';
            case 'fair': return 'fair';
            case 'good': return 'good';
            case 'excellent': return 'excellent';
            default: return '';
        }
    }

    function showAlert(status) {
        const alertDiv = document.getElementById('alert');
        if(status.toLowerCase() === 'critical') {
            alertDiv.innerHTML = `<div class="alert alert-critical">⚠ Critical coverage! Add unit tests immediately.</div>`;
        } else if(status.toLowerCase() === 'poor') {
            alertDiv.innerHTML = `<div class="alert alert-poor">⚠ Poor coverage! Consider adding more tests.</div>`;
        } else {
            alertDiv.innerHTML = '';
        }
    }

    function renderTable(data, level) {
        const container = document.getElementById('table-container');
        container.innerHTML = '';

        if(data.length === 0) {
            container.innerHTML = '<p style="text-align:center;">No data to display</p>';
            return;
        }

        const table = document.createElement('table');
        const thead = document.createElement('thead');
        const headerRow = document.createElement('tr');

        Object.keys(data[0]).forEach(h => {
            const th = document.createElement('th');
            th.innerText = h;
            headerRow.appendChild(th);
        });

        thead.appendChild(headerRow);
        table.appendChild(thead);

        const tbody = document.createElement('tbody');

        data.forEach(row => {
            const tr = document.createElement('tr');
            Object.values(row).forEach(val => {
                const td = document.createElement('td');
                td.innerText = val;
                tr.appendChild(td);
            });

            tr.classList.add(getCoverageClass(row['Status']));

            if(level === 'package') {
                tr.addEventListener('click', () => {
                    currentPackage = row['Package'];
                    const filteredClasses = classData.filter(c => c['Package'] === currentPackage);
                    updateBreadcrumb();
                    showAlert(filteredClasses.reduce((acc, c) => Math.min(acc, parseFloat(c['Instruction Coverage (%)'])), 100) < 20 ? 'critical' : '');
                    renderTable(filteredClasses, 'class');
                });
            } else if(level === 'class') {
                tr.addEventListener('click', () => {
                    currentClass = row['Class (with extension)'];
                    const filteredMethods = methodData.filter(m => m['Class (with extension)'] === currentClass && m['Package'] === currentPackage);
                    updateBreadcrumb();
                    showAlert(filteredMethods.reduce((acc, m) => Math.min(acc, parseFloat(m['Instruction Coverage (%)'])), 100) < 20 ? 'critical' : '');
                    renderTable(filteredMethods, 'method');
                });
            }

            tbody.appendChild(tr);
        });

        table.appendChild(tbody);
        container.appendChild(table);
    }

    function updateBreadcrumb() {
        const bc = document.getElementById('breadcrumb');
        let html = `<span onclick="goHome()">Home</span>`;
        if(currentPackage) html += ` > <span onclick="showPackage()"> ${currentPackage} </span>`;
        if(currentClass) html += ` > <span onclick="showClass()"> ${currentClass} </span>`;
        bc.innerHTML = html;
    }

    function goHome() {
        currentPackage = null;
        currentClass = null;
        showAlert('');
        renderTable(packageData, 'package');
        updateBreadcrumb();
    }

    function showPackage() {
        if(!currentPackage) return;
        const filteredClasses = classData.filter(c => c['Package'] === currentPackage);
        showAlert(filteredClasses.reduce((acc, c) => Math.min(acc, parseFloat(c['Instruction Coverage (%)'])), 100) < 20 ? 'critical' : '');
        currentClass = null;
        renderTable(filteredClasses, 'class');
        updateBreadcrumb();
    }

    function showClass() {
        if(!currentPackage || !currentClass) return;
        const filteredMethods = methodData.filter(m => m['Class (with extension)'] === currentClass && m['Package'] === currentPackage);
        showAlert(filteredMethods.reduce((acc, m) => Math.min(acc, parseFloat(m['Instruction Coverage (%)'])), 100) < 20 ? 'critical' : '');
        renderTable(filteredMethods, 'method');
        updateBreadcrumb();
    }

    async function init() {
        packageData = await loadCSV('package_report.csv');
        classData = await loadCSV('class_report.csv');
        methodData = await loadCSV('method_report.csv');

        renderTable(packageData, 'package');
    }

    init();
</script>

</body>
</html>
