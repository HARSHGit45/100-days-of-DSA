<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Modern JaCoCo Dashboard</title>
<style>
    body { font-family: 'Inter', sans-serif; background: #f4f6f9; margin: 0; padding: 0; }
    header { background: #1976d2; color: white; text-align: center; padding: 1rem; box-shadow: 0 2px 4px rgba(0,0,0,0.2); }
    h1 { margin: 0; font-weight: 500; }

    .breadcrumb { padding: 0.75rem 1rem; color: #555; font-size: 0.9rem; }
    .breadcrumb span { cursor: pointer; color: #1976d2; margin-right: 5px; }
    .breadcrumb span:hover { text-decoration: underline; }

    /* Tabs */
    .tabs { display: flex; justify-content: center; gap: 1rem; margin: 1rem 0; }
    .tab {
        background: white; padding: 0.5rem 1rem; border-radius: 8px; cursor: pointer;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1); transition: background 0.2s, transform 0.2s;
    }
    .tab.active { background: #1976d2; color: white; transform: translateY(-2px); }

    #summary { display: flex; flex-wrap: wrap; gap: 1rem; justify-content: center; margin: 1rem; }
    .card {
        background: white; padding: 1rem 1.5rem; border-radius: 12px; flex: 1 1 200px; min-width: 200px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1); text-align: center; transition: transform 0.2s;
    }
    .card:hover { transform: translateY(-3px); }
    .card h2 { margin: 0.25rem 0; font-size: 2rem; }
    .card p { margin: 0; font-size: 0.9rem; color: #666; }

    /* Search */
    .search-container { width: 95%; margin: 0 auto; text-align: right; }
    .search-container input {
        padding: 0.5rem; width: 250px; border-radius: 8px; border: 1px solid #ccc; margin-bottom: 0.5rem;
    }

  table {
    width: 95%;
    margin: 1rem auto;
    border-collapse: collapse;
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0,0,0,0.05);
}
th, td {
    padding: 0.75rem 1rem;
    text-align: left;
}
th {
    background: #1976d2;
    color: white;
    position: sticky;
    top: 0;
    cursor: pointer;
}
tr:hover {
    background: #e3f2fd;
    cursor: pointer;
    transition: background 0.2s;
}
th.sort-asc::after { content: " ▲"; font-size: 0.8rem; }
th.sort-desc::after { content: " ▼"; font-size: 0.8rem; }

/* --- PROGRESS BAR STYLING --- */
.progress-container {
    background: #f0f0f0;
    border-radius: 12px;
    height: 16px;
    overflow: hidden;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.15);
}

.progress-bar {
    height: 100%;
    border-radius: 12px;
    transition: width 0.6s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(0,0,0,0.3);
}

/* --- PROGRESS LEVEL COLORS --- */
.critical {
    background: linear-gradient(90deg, #e53935, #b71c1c);
}
.poor {
    background: linear-gradient(90deg, #fb8c00, #ef6c00);
}
.fair {
    background: linear-gradient(90deg, #fbc02d, #f9a825);
    color: #333;
    text-shadow: none;
}
.good {
    background: linear-gradient(90deg, #43a047, #2e7d32);
}
.excellent {
    background: linear-gradient(90deg, #009688, #00695c);
}


    .alert {
        width: 95%; margin: 1rem auto; padding: 1rem; border-radius: 10px; color: white; font-weight: bold;
        text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .alert-critical { background: #d32f2f; }
    .alert-poor { background: #f57c00; }

    @media(max-width: 768px) {
        th, td { padding: 0.5rem; font-size: 0.85rem; }
        .search-container input { width: 100%; }
    }
</style>
</head>
<body>

<header>
    <h1>Modern JaCoCo Coverage Dashboard</h1>
</header>

<div class="breadcrumb" id="breadcrumb">Home</div>

<div class="tabs">
    <div class="tab active" onclick="filterTab('all')">All Packages</div>
    <div class="tab" onclick="filterTab('top')">Top Performers</div>
    <div class="tab" onclick="filterTab('attention')">Needs Attention</div>
</div>

<div id="summary"></div>
<div id="alert"></div>

<div class="search-container">
    <input type="text" id="searchBox" placeholder="Search...">
</div>

<div id="table-container"></div>

<script>
let packageData = [], classData = [], methodData = [];
let currentPackage = null, currentClass = null;
let currentTab = 'all';
let currentSort = { key: null, order: 'asc' };

// ================= CSV Loader =================
async function loadCSV(file) {
    const res = await fetch(file);
    const text = await res.text();
    const rows = text.split('\n').filter(r => r.trim() !== '');
    const headers = rows[0].split(',');
    return rows.slice(1).map(row => {
        const cols = row.split(',');
        let obj = {};
        headers.forEach((h,i) => obj[h.trim()] = cols[i]?.trim());
        return obj;
    });
}

// ================= Helper Functions =================
function getCoverageClass(status) {
    switch(status.toLowerCase()) {
        case 'critical': return 'critical';
        case 'poor': return 'poor';
        case 'fair': return 'fair';
        case 'good': return 'good';
        case 'excellent': return 'excellent';
        default: return '';
    }
}

function showAlert(status) {
    const alertDiv = document.getElementById('alert');
    if(status.toLowerCase() === 'critical') {
        alertDiv.innerHTML = `<div class="alert alert-critical">⚠ Critical coverage! Add unit tests immediately.</div>`;
    } else if(status.toLowerCase() === 'poor') {
        alertDiv.innerHTML = `<div class="alert alert-poor">⚠ Poor coverage! Consider adding more tests.</div>`;
    } else {
        alertDiv.innerHTML = '';
    }
}

function updateBreadcrumb() {
    const bc = document.getElementById('breadcrumb');
    let html = `<span onclick="goHome()">Home</span>`;
    if(currentPackage) html += ` > <span onclick="showPackage()">${currentPackage}</span>`;
    if(currentClass) html += ` > <span onclick="showClass()">${currentClass}</span>`;
    bc.innerHTML = html;
}

// ================= Tabs =================
function filterTab(tab){
    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
    event.target.classList.add('active');
    currentTab = tab;
    goHome();
}

// ================= Search Filter =================
function applySearchFilter(data){
    const query = document.getElementById('searchBox').value.toLowerCase();
    if(!query) return data;
    return data.filter(row => Object.values(row).some(val => val?.toLowerCase().includes(query)));
}

// ================= Sorting =================
function sortData(data, key){
    if(currentSort.key === key){
        currentSort.order = currentSort.order === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort.key = key;
        currentSort.order = 'asc';
    }
    const order = currentSort.order === 'asc' ? 1 : -1;
    return data.sort((a,b)=>{
        let x = a[key] || '', y = b[key] || '';
        if(!isNaN(x) && !isNaN(y)) return (parseFloat(x)-parseFloat(y))*order;
        return x.localeCompare(y)*order;
    });
}

// ================= Render Summary =================
function renderSummary() {
    const summary = document.getElementById('summary');
    summary.innerHTML = '';

    const totalPackages = packageData.length;
    const totalClasses = classData.length;
    const criticalPackages = packageData.filter(p => p['Status'].toLowerCase() === 'critical').length;
    const avgCoverage = Math.round(packageData.reduce((acc, p) => acc + parseFloat(p['Instruction Coverage (%)']), 0) / totalPackages);

    const cards = [
        {title: 'Total Packages', value: totalPackages},
        {title: 'Total Classes', value: totalClasses},
        {title: 'Critical Packages', value: criticalPackages},
        {title: 'Average Instruction Coverage', value: avgCoverage + '%'}
    ];

    cards.forEach(c => {
        const div = document.createElement('div');
        div.className = 'card';
        div.innerHTML = `<p>${c.title}</p><h2>${c.value}</h2>`;
        summary.appendChild(div);
    });
}

// ================= Render Table =================
function renderTable(data, level) {
    const container = document.getElementById('table-container');
    container.innerHTML = '';

    // Apply Tab Filter
    if(level === 'package'){
        if(currentTab === 'top') data = data.filter(p => parseFloat(p['Instruction Coverage (%)']) >= 80);
        else if(currentTab === 'attention') data = data.filter(p => parseFloat(p['Instruction Coverage (%)']) < 40);
    }

    // Apply Search Filter
    data = applySearchFilter(data);

    if(data.length === 0){
        container.innerHTML = '<p style="text-align:center;">No data to display</p>';
        return;
    }

    const table = document.createElement('table');
    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    Object.keys(data[0]).forEach(h => {
        const th = document.createElement('th');
        th.innerText = h;
       th.addEventListener('click', () => {
    data = sortData(data, h);
    renderTable(data, level);

    // Remove existing sort icons from all headers
    document.querySelectorAll('th').forEach(header => {
        header.classList.remove('sort-asc', 'sort-desc');
    });

    // Add the correct icon to the currently clicked header
    if (currentSort.order === 'asc') th.classList.add('sort-asc');
    else th.classList.add('sort-desc');
});

        headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);

    const tbody = document.createElement('tbody');

    data.forEach(row => {
        const tr = document.createElement('tr');

        Object.keys(row).forEach(key => {
            const td = document.createElement('td');
            let val = row[key];

            if(key.toLowerCase().includes('coverage')) {
                td.innerHTML = `<div class="progress-container">
                    <div class="progress-bar ${getCoverageClass(row['Status'])}" style="width:${val}%">${val}%</div>
                </div>`;
            } else td.innerText = val;

            tr.appendChild(td);
        });

        if(level === 'package') {
            tr.addEventListener('click', () => {
                currentPackage = row['Package'];
                currentClass = null;
                const filtered = classData.filter(c => c['Package'] === currentPackage);
                renderTable(filtered,'class');
                updateBreadcrumb();
            });
        } else if(level==='class') {
            tr.addEventListener('click', () => {
                currentClass = row['Class (with extension)'];
                const filtered = methodData.filter(m => m['Package']===currentPackage && m['Class (with extension)']===currentClass);
                renderTable(filtered,'method');
                updateBreadcrumb();
            });
        }

        tbody.appendChild(tr);
    });

    table.appendChild(tbody);
    container.appendChild(table);
}

// ================= Navigation =================
function goHome(){
    currentPackage = null; currentClass = null;
    renderTable(packageData,'package');
    updateBreadcrumb();
}

function showPackage(){
    if(!currentPackage) return;
    const filtered = classData.filter(c=>c['Package']===currentPackage);
    renderTable(filtered,'class');
    updateBreadcrumb();
}

function showClass(){
    if(!currentPackage || !currentClass) return;
    const filtered = methodData.filter(m=>m['Package']===currentPackage && m['Class (with extension)']===currentClass);
    renderTable(filtered,'method');
    updateBreadcrumb();
}

// ================= Init =================
async function init(){
    packageData = await loadCSV('package_report.csv');
    classData = await loadCSV('class_report.csv');
    methodData = await loadCSV('method_report.csv');
    renderSummary();
    renderTable(packageData,'package');
    document.getElementById('searchBox').addEventListener('input', () => renderTable(packageData,'package'));
}

init();
</script>

</body>
</html>




















<!-- Loader Overlay -->
<div id="loader">
  <div class="spinner"></div>
  <p>Please wait, loading data...</p>
</div>







/* === LOADER STYLING === */
#loader {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(255,255,255,0.9);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  font-size: 1.2rem;
  color: #1976d2;
  z-index: 9999;
}

.spinner {
  border: 4px solid #e0e0e0;
  border-top: 4px solid #1976d2;
  border-radius: 50%;
  width: 45px;
  height: 45px;
  animation: spin 1s linear infinite;
  margin-bottom: 15px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}















// ================= Init =================
async function init() {
    const loader = document.getElementById('loader');
    loader.style.display = 'flex'; // Show loader

    try {
        packageData = await loadCSV('package_report.csv');
        classData = await loadCSV('class_report.csv');
        methodData = await loadCSV('method_report.csv');

        renderSummary();
        renderTable(packageData, 'package');
        document.getElementById('searchBox').addEventListener('input', () => renderTable(packageData, 'package'));
    } catch (error) {
        console.error("Error loading CSVs:", error);
        document.getElementById('table-container').innerHTML = '<p style="text-align:center;color:red;">Error loading data.</p>';
    } finally {
        loader.style.display = 'none'; // Hide loader after all data loaded
    }
}

init();











































 let totalMissed = 0, totalCovered = 0;
    packageData.forEach(p => {
        totalMissed += parseInt(p['Missed Instructions'] || 0);
        totalCovered += parseInt(p['Covered Instructions'] || 0);
    });

    let totalCoverage = 0;
    if (totalCovered + totalMissed > 0) {
        totalCoverage = ((totalCovered / (totalCovered + totalMissed)) * 100).toFixed(2);
    }

    const cards = [
        {title: 'Total Packages', value: totalPackages},
        {title: 'Total Classes', value: totalClasses},
        {title: 'Critical Packages', value: criticalPackages},
        {title: 'Average Instruction Coverage', value: avgCoverage + '%'},
        {title: 'Total Project Coverage', value: totalCoverage + '%'} // 👈 Added new card
    ];

