<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>JaCoCo Coverage Dashboard</title>
  <link rel="stylesheet" href="style.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <header>
    <h1 id="homeTitle">ðŸ“Š JaCoCo Coverage Dashboard</h1>
    <input type="text" id="searchBox" placeholder="Search...">
  </header>

  <section id="summary"></section>

  <section id="chartsContainer">
    <div class="chart-card">
      <canvas id="packageChart"></canvas>
      <p>Package Status Distribution</p>
    </div>
    <div class="chart-card">
      <canvas id="instructionChart"></canvas>
      <p>Instruction Coverage</p>
    </div>
    <div class="chart-card">
      <canvas id="branchChart"></canvas>
      <p>Branch Coverage</p>
    </div>
    <div class="chart-card">
      <canvas id="averageChart"></canvas>
      <p>Average Coverage</p>
    </div>
  </section>

  <section id="tableContainer"></section>

  <script src="script.js"></script>
</body>
</html>




















body {
  font-family: 'Segoe UI', sans-serif;
  background: #f4f7fb;
  margin: 0;
  padding: 0;
}

header {
  background: #283593;
  color: white;
  padding: 15px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
}

header h1 {
  cursor: pointer;
}

header input {
  padding: 8px;
  width: 200px;
  border-radius: 6px;
  border: none;
  outline: none;
}

#summary {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 15px;
  padding: 20px;
}

.summary-card {
  background: white;
  padding: 15px 20px;
  border-radius: 12px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  text-align: center;
  width: 180px;
}

#chartsContainer {
  display: flex;
  justify-content: space-around;
  align-items: flex-start;
  flex-wrap: wrap;
  padding: 20px;
  gap: 20px;
}

.chart-card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  padding: 15px;
  text-align: center;
  width: 250px;
}

canvas {
  max-width: 100%;
}

table {
  width: 90%;
  margin: 20px auto;
  border-collapse: collapse;
  background: white;
  border-radius: 8px;
  overflow: hidden;
}

th, td {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: center;
}

th {
  background: #3949ab;
  color: white;
  cursor: pointer;
}

tr:hover {
  background: #f1f1f1;
}















































let packageData = [], classData = [], methodData = [];
let currentLevel = 'package';
let currentPackage = '', currentClass = '';
let charts = {};

async function loadCSV(file) {
  const res = await fetch(file);
  const text = await res.text();
  const rows = text.split('\n').filter(r => r.trim() !== '');
  const headers = rows[0].split(',');
  return rows.slice(1).map(row => {
    const cols = row.split(',');
    let obj = {};
    headers.forEach((h, i) => obj[h.trim()] = cols[i]?.trim());
    return obj;
  });
}

function getStats(data) {
  const totalMissed = data.reduce((sum, d) => sum + parseInt(d['Missed Instructions'] || 0), 0);
  const totalCovered = data.reduce((sum, d) => sum + parseInt(d['Covered Instructions'] || 0), 0);
  const totalCoverage = (totalCovered + totalMissed > 0)
    ? ((totalCovered / (totalCovered + totalMissed)) * 100).toFixed(2)
    : 0;

  const branchCoverage = (data.reduce((sum, d) => sum + parseFloat(d['Branch Coverage %'] || 0), 0) / data.length).toFixed(2);
  const avgCoverage = (data.reduce((sum, d) => sum + parseFloat(d['Instruction Coverage %'] || 0), 0) / data.length).toFixed(2);

  return { totalCoverage, branchCoverage, avgCoverage };
}

function renderSummary(data = packageData, title = 'Project Overview') {
  const summary = document.getElementById('summary');
  summary.innerHTML = '';

  const stats = getStats(data);
  const totalPackages = packageData.length;
  const totalClasses = classData.length;
  const criticalPackages = packageData.filter(p => p['Status'].toLowerCase() === 'critical').length;

  const cards = [
    { title: title, value: '' },
    { title: 'Total Packages', value: totalPackages },
    { title: 'Total Classes', value: totalClasses },
    { title: 'Critical Packages', value: criticalPackages },
    { title: 'Average Instruction Coverage', value: stats.avgCoverage + '%' },
    { title: 'Total Project Coverage', value: stats.totalCoverage + '%' }
  ];

  cards.forEach(c => {
    const div = document.createElement('div');
    div.className = 'summary-card';
    div.innerHTML = `<h3>${c.title}</h3><p>${c.value}</p>`;
    summary.appendChild(div);
  });

  renderCharts(data, stats);
}

function renderCharts(data, stats) {
  Object.values(charts).forEach(c => c.destroy && c.destroy());

  const ctx1 = document.getElementById('packageChart').getContext('2d');
  const ctx2 = document.getElementById('instructionChart').getContext('2d');
  const ctx3 = document.getElementById('branchChart').getContext('2d');
  const ctx4 = document.getElementById('averageChart').getContext('2d');

  const pkgStatus = ['Critical', 'Poor', 'Fair', 'Good', 'Excellent'];
  const pkgCounts = pkgStatus.map(s => data.filter(p => p['Status']?.toLowerCase() === s.toLowerCase()).length);

  charts.package = new Chart(ctx1, {
    type: 'pie',
    data: {
      labels: pkgStatus,
      datasets: [{
        data: pkgCounts,
        backgroundColor: ['#e53935', '#fb8c00', '#fbc02d', '#43a047', '#009688']
      }]
    },
    options: { plugins: { legend: { position: 'bottom' } } }
  });

  charts.instruction = new Chart(ctx2, {
    type: 'doughnut',
    data: {
      labels: ['Covered', 'Missed'],
      datasets: [{
        data: [stats.totalCoverage, 100 - stats.totalCoverage],
        backgroundColor: ['#43a047', '#e53935']
      }]
    },
    options: { plugins: { legend: { position: 'bottom' } } }
  });

  charts.branch = new Chart(ctx3, {
    type: 'doughnut',
    data: {
      labels: ['Covered', 'Missed'],
      datasets: [{
        data: [stats.branchCoverage, 100 - stats.branchCoverage],
        backgroundColor: ['#009688', '#ef5350']
      }]
    },
    options: { plugins: { legend: { position: 'bottom' } } }
  });

  charts.average = new Chart(ctx4, {
    type: 'doughnut',
    data: {
      labels: ['Average Coverage', 'Remaining'],
      datasets: [{
        data: [stats.avgCoverage, 100 - stats.avgCoverage],
        backgroundColor: ['#5c6bc0', '#c5cae9']
      }]
    },
    options: { plugins: { legend: { position: 'bottom' } } }
  });
}

function renderTable(data, level) {
  const tableContainer = document.getElementById('tableContainer');
  currentLevel = level;
  tableContainer.innerHTML = '';

  const table = document.createElement('table');
  const headers = Object.keys(data[0] || {});
  const thead = document.createElement('thead');
  const tr = document.createElement('tr');

  headers.forEach(h => {
    const th = document.createElement('th');
    th.textContent = h;
    th.addEventListener('click', () => {
      data.sort((a, b) => (a[h] > b[h] ? 1 : -1));
      renderTable(data, level);
    });
    tr.appendChild(th);
  });

  thead.appendChild(tr);
  table.appendChild(thead);

  const tbody = document.createElement('tbody');
  data.forEach(row => {
    const tr = document.createElement('tr');
    headers.forEach(h => {
      const td = document.createElement('td');
      td.textContent = row[h];
      tr.appendChild(td);
    });

    if (level === 'package') {
      tr.addEventListener('click', () => {
        currentPackage = row['Package'];
        const filtered = classData.filter(c => c['Package'] === currentPackage);
        renderSummary(filtered, `Package: ${currentPackage}`);
        renderTable(filtered, 'class');
      });
    } else if (level === 'class') {
      tr.addEventListener('click', () => {
        currentClass = row['Class (with extension)'];
        const filtered = methodData.filter(m => m['Package'] === currentPackage && m['Class (with extension)'] === currentClass);
        renderSummary(filtered, `Class: ${currentClass}`);
        renderTable(filtered, 'method');
      });
    }

    tbody.appendChild(tr);
  });

  table.appendChild(tbody);
  tableContainer.appendChild(table);
}

async function init() {
  packageData = await loadCSV('package_report.csv');
  classData = await loadCSV('class_report.csv');
  methodData = await loadCSV('method_report.csv');

  renderSummary(packageData);
  renderTable(packageData, 'package');

  document.getElementById('searchBox').addEventListener('input', e => {
    const query = e.target.value.toLowerCase();
    let filtered;
    if (currentLevel === 'package') filtered = packageData.filter(p => p['Package'].toLowerCase().includes(query));
    else if (currentLevel === 'class') filtered = classData.filter(c => c['Package'] === currentPackage && c['Class (with extension)'].toLowerCase().includes(query));
    else filtered = methodData.filter(m => m['Package'] === currentPackage && m['Class (with extension)'] === currentClass && m['Method'].toLowerCase().includes(query));
    renderTable(filtered, currentLevel);
  });

  document.getElementById('homeTitle').addEventListener('click', () => {
    renderSummary(packageData);
    renderTable(packageData, 'package');
  });
}

window.onload = init;
